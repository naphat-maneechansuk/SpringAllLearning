<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/LearningBoot/src/main/java/com/fullSpring/LearningBoot/ShopWithGoodsController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/LearningBoot/src/main/java/com/fullSpring/LearningBoot/ShopWithGoodsController.java" />
              <option name="originalContent" value="package com.fullSpring.LearningBoot;&#10;&#10;import com.fullSpring.LearningBoot.dto.*;&#10;import com.fullSpring.LearningBoot.entity.GoodsWithShop;&#10;import com.fullSpring.LearningBoot.entity.ShopWithGoods;&#10;import com.fullSpring.LearningBoot.repository.ShopWithGoodsRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.stream.Collectors;&#10;&#10;@RestController&#10;public class ShopWithGoodsController {&#10;    @Autowired&#10;    private ShopWithGoodsRepository shopWithGoodsRepository;&#10;&#10;    @GetMapping(&quot;/shopWithGoods/{shopId}&quot;)&#10;    public ShopWithGoodsDto getShopWithGoods(&#10;            @PathVariable(&quot;shopId&quot;) String shopId&#10;    ) {&#10;        ShopWithGoods shopWithGoods = shopWithGoodsRepository.findById(shopId).orElseThrow();&#10;        return new ShopWithGoodsDto()&#10;                .setShopDto(new ShopDto()&#10;                        .setShopId(shopWithGoods.getShopId())&#10;                        .setShopName(shopWithGoods.getShopName())&#10;                ).setListOfGoods(&#10;                        shopWithGoods.getGoods().stream().map(goods -&gt; {&#10;                            return new GoodsDto()&#10;                                    .setGoodsId(goods.getGoodsId())&#10;                                    .setGoodsName(goods.getGoodsName())&#10;                                    .setGoodsPrice(goods.getGoodsPrice())&#10;                                    .setShopId(goods.getShop().getShopId())&#10;                                    .setShopName(goods.getShop().getShopName());&#10;                        }).collect(Collectors.toList())&#10;                );&#10;    }&#10;&#10;&#10;    @PostMapping(&quot;/shopWithGoods/insert&quot;)&#10;    public ShopWithGoodsDto insertShopWithGoods(&#10;            @RequestBody InsertShopWithGoodsDto insertShopWithGoodsDto&#10;    ) {&#10;&#10;        ShopWithGoods shopWithGoods = new ShopWithGoods()&#10;                .setShopId(insertShopWithGoodsDto.getShopDto().getShopId())&#10;                .setShopName(insertShopWithGoodsDto.getShopDto().getShopName());&#10;&#10;        for (GoodsInShopWithGoodsDto goodsInShopWithGoodsDto : insertShopWithGoodsDto.getListOfGoods()) {&#10;            GoodsWithShop goodsWithShop = new GoodsWithShop()&#10;                    .setGoodsId(goodsInShopWithGoodsDto.getGoodsId())&#10;                    .setGoodsPrice(goodsInShopWithGoodsDto.getGoodsPrice())&#10;                    .setGoodsName(goodsInShopWithGoodsDto.getGoodsName());&#10;            shopWithGoods.addGoods(goodsWithShop);&#10;        }&#10;&#10;        shopWithGoods = shopWithGoodsRepository.save(shopWithGoods);&#10;        return new ShopWithGoodsDto()&#10;                .setShopDto(new ShopDto()&#10;                        .setShopId(shopWithGoods.getShopId())&#10;                        .setShopName(shopWithGoods.getShopName())&#10;                ).setListOfGoods(&#10;                        shopWithGoods.getGoods().stream().map(goods -&gt; {&#10;                            return new GoodsDto()&#10;                                    .setGoodsId(goods.getGoodsId())&#10;                                    .setGoodsName(goods.getGoodsName())&#10;                                    .setGoodsPrice(goods.getGoodsPrice())&#10;                                    .setShopId(goods.getShop().getShopId())&#10;                                    .setShopName(goods.getShop().getShopName());&#10;                        }).collect(Collectors.toList())&#10;                );&#10;    }&#10;&#10;&#10;    @GetMapping(&quot;/shopWithGoods/{shopId}/deleteAllGoods&quot;)&#10;    public ShopWithGoodsDto deleteAllGoods(&#10;            @PathVariable(&quot;shopId&quot;) String shopId&#10;    ) {&#10;        ShopWithGoods shopWithGoods = shopWithGoodsRepository.findById(shopId).orElseThrow();&#10;&#10;        shopWithGoods.removeAllGoods();&#10;        shopWithGoods = shopWithGoodsRepository.save(shopWithGoods);&#10;&#10;        return new ShopWithGoodsDto()&#10;                .setShopDto(new ShopDto()&#10;                        .setShopId(shopWithGoods.getShopId())&#10;                        .setShopName(shopWithGoods.getShopName())&#10;                ).setListOfGoods(&#10;                        shopWithGoods.getGoods().stream().map(goods -&gt; {&#10;                            return new GoodsDto()&#10;                                    .setGoodsId(goods.getGoodsId())&#10;                                    .setGoodsName(goods.getGoodsName())&#10;                                    .setGoodsPrice(goods.getGoodsPrice())&#10;                                    .setShopId(goods.getShop().getShopId())&#10;                                    .setShopName(goods.getShop().getShopName());&#10;                        }).collect(Collectors.toList())&#10;                );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.fullSpring.LearningBoot;&#10;&#10;import com.fullSpring.LearningBoot.dto.*;&#10;import com.fullSpring.LearningBoot.entity.GoodsWithShop;&#10;import com.fullSpring.LearningBoot.entity.ShopWithGoods;&#10;import com.fullSpring.LearningBoot.repository.ShopWithGoodsRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.stream.Collectors;&#10;&#10;@RestController&#10;public class ShopWithGoodsController {&#10;    @Autowired&#10;    private ShopWithGoodsRepository shopWithGoodsRepository;&#10;&#10;    @GetMapping(&quot;/shopWithGoods/{shopId}&quot;)&#10;    public ShopWithGoodsDto getShopWithGoods(&#10;            @PathVariable(&quot;shopId&quot;) String shopId&#10;    ) {&#10;        ShopWithGoods shopWithGoods = shopWithGoodsRepository.findById(shopId).orElseThrow();&#10;        return new ShopWithGoodsDto()&#10;                .setShopDto(new ShopDto()&#10;                        .setShopId(shopWithGoods.getShopId())&#10;                        .setShopName(shopWithGoods.getShopName())&#10;                ).setListOfGoods(&#10;                        shopWithGoods.getGoods().stream().map(goods -&gt; {&#10;                            return new GoodsDto()&#10;                                    .setGoodsId(goods.getGoodsId())&#10;                                    .setGoodsName(goods.getGoodsName())&#10;                                    .setGoodsPrice(goods.getGoodsPrice())&#10;                                    .setShopId(goods.getShop().getShopId())&#10;                                    .setShopName(goods.getShop().getShopName());&#10;                        }).collect(Collectors.toList())&#10;                );&#10;    }&#10;&#10;&#10;    @PostMapping(&quot;/shopWithGoods/insert&quot;)&#10;    public ShopWithGoodsDto insertShopWithGoods(&#10;            @RequestBody InsertShopWithGoodsDto insertShopWithGoodsDto&#10;    ) {&#10;&#10;        ShopWithGoods shopWithGoods = new ShopWithGoods()&#10;                .setShopId(insertShopWithGoodsDto.getShopDto().getShopId())&#10;                .setShopName(insertShopWithGoodsDto.getShopDto().getShopName());&#10;&#10;        for (GoodsInShopWithGoodsDto goodsInShopWithGoodsDto : insertShopWithGoodsDto.getListOfGoods()) {&#10;            GoodsWithShop goodsWithShop = new GoodsWithShop()&#10;                    .setGoodsId(goodsInShopWithGoodsDto.getGoodsId())&#10;                    .setGoodsPrice(goodsInShopWithGoodsDto.getGoodsPrice())&#10;                    .setGoodsName(goodsInShopWithGoodsDto.getGoodsName())&#10;                    .setShop(shopWithGoods); // Fix: set the shop reference for the goods&#10;            shopWithGoods.addGoods(goodsWithShop);&#10;        }&#10;&#10;        shopWithGoods = shopWithGoodsRepository.save(shopWithGoods);&#10;        return new ShopWithGoodsDto()&#10;                .setShopDto(new ShopDto()&#10;                        .setShopId(shopWithGoods.getShopId())&#10;                        .setShopName(shopWithGoods.getShopName())&#10;                ).setListOfGoods(&#10;                        shopWithGoods.getGoods().stream().map(goods -&gt; {&#10;                            return new GoodsDto()&#10;                                    .setGoodsId(goods.getGoodsId())&#10;                                    .setGoodsName(goods.getGoodsName())&#10;                                    .setGoodsPrice(goods.getGoodsPrice())&#10;                                    .setShopId(goods.getShop().getShopId())&#10;                                    .setShopName(goods.getShop().getShopName());&#10;                        }).collect(Collectors.toList())&#10;                );&#10;    }&#10;&#10;&#10;    @GetMapping(&quot;/shopWithGoods/{shopId}/deleteAllGoods&quot;)&#10;    public ShopWithGoodsDto deleteAllGoods(&#10;            @PathVariable(&quot;shopId&quot;) String shopId&#10;    ) {&#10;        ShopWithGoods shopWithGoods = shopWithGoodsRepository.findById(shopId).orElseThrow();&#10;&#10;        shopWithGoods.removeAllGoods();&#10;        shopWithGoods = shopWithGoodsRepository.save(shopWithGoods);&#10;&#10;        return new ShopWithGoodsDto()&#10;                .setShopDto(new ShopDto()&#10;                        .setShopId(shopWithGoods.getShopId())&#10;                        .setShopName(shopWithGoods.getShopName())&#10;                ).setListOfGoods(&#10;                        shopWithGoods.getGoods().stream().map(goods -&gt; {&#10;                            return new GoodsDto()&#10;                                    .setGoodsId(goods.getGoodsId())&#10;                                    .setGoodsName(goods.getGoodsName())&#10;                                    .setGoodsPrice(goods.getGoodsPrice())&#10;                                    .setShopId(goods.getShop().getShopId())&#10;                                    .setShopName(goods.getShop().getShopName());&#10;                        }).collect(Collectors.toList())&#10;                );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>